{"version":3,"sources":["images/products/verisure-portal.png","generated/graphql.tsx","ts/enums/ActionType.ts","helpers/steps.ts","ts/enums/TransistionState.ts","helpers/data.ts","context/FlowContext.tsx","components/Step/query.ts","ts/enums/BuildingBlockType.ts","ts/enums/ConditionType.ts","helpers/conditions.ts","ts/enums/ConversionType.ts","ts/enums/KnownQueryParameter.ts","ts/enums/Cookie.ts","components/Blocks/Title.tsx","components/Blocks/Paragraph.tsx","components/Blocks/Message.tsx","helpers/blocks.ts","conf.ts","ts/enums/ConditionContext.ts","helpers/globalConditions.ts","ts/enums/ResultType.ts","helpers/hooks.ts","helpers/resultPage.ts","ts/enums/RadioButtonType.ts","components/Blocks/SubmitButton/SubmitButton.tsx","components/Blocks/RadioButton.tsx","ts/enums/TextfieldType.ts","ts/enums/InputAttributeType.ts","components/Blocks/Button.tsx","components/Blocks/Question.tsx","components/Blocks/TextField.tsx","ts/enums/MimeType.ts","components/Blocks/ButtonBack.tsx","components/Blocks/Progress.tsx","ts/enums/EventHandlerEvent.ts","components/Blocks/Image.tsx","helpers/eventHandler.ts","components/Blocks/Block.tsx","components/Step/Step.tsx","components/loader/Loader.tsx","components/Step/index.tsx","components/Result/ResultHome.tsx","components/Result/ResultComponents.tsx","components/Result/Result.tsx","components/Flow/Flow.tsx","components/Flow/index.tsx","App.tsx","index.tsx","components/Result/Result.module.scss","components/Blocks/Image.module.scss","components/Blocks/Button.module.scss","components/Blocks/RadioButton.module.scss","components/Blocks/Message.module.scss","components/Blocks/TextField.module.scss","components/Blocks/Progress.module.scss","components/Blocks/Title.module.scss","components/Blocks/Paragraph.module.scss","components/Blocks/SubmitButton/SubmitButton.module.scss","components/Blocks/Question.module.scss","components/Step/Step.module.scss","components/loader/Loader.module.scss","images/products/verisure-home.png"],"names":["module","exports","SortOrder","Trashed","SubmitFlowDocument","gql","GetFlowDocument","GetStepDocument","ActionType","TransistionState","getLatestEntryFromTimeline","timeline","length","collectionWithoutTypename","collection","map","item","undefined","__typename","initialState","currentStep","backStep","stepTransitionState","exiting","globalConditions","currentInputConditions","resultPageType","flowReducer","state","action","type","updateCurrentInputConditions","conditions","addGlobalConditions","setCurrentStep","step","addToTimeline","removeLastFromTimeline","lastEntry","slice","getResultPage","resultType","Error","StateContext","createContext","StateProvider","children","Provider","value","useReducer","useStateValue","useContext","BuildingBlockType","ConditionType","QUERY_GET_NEXT_STEP","ConversionType","KnownQueryParameter","Cookie","filterConditionsByType","conditionTypes","filter","condition","input_type","includes","createContextCondition","key","input_key","input_value","createCondition","context","Title","title","className","Styles","Paragraph","markdown","source","Message","zipcode","reduce","acc","inputCondition","message","sleep","delay","Promise","resolve","setTimeout","ConditionContext","KNOWN_QUERY_PARAMETERS","utm_campaign","KNOWN_IMAGE_FORMATS","onex","twox","threex","KNOWN_COOKIES","_gid","ResultType","getKnownQueryParams","queryParams","queryString","window","location","search","parse","substring","getCurrentQueryParameters","knownParams","knownQueryParameters","Object","keys","property","splitCampaignParameterIntoConditions","splitCampaign","String","match","campaign","fcon","push","getCookieConditions","cookieString","replace","split","rawCookie","parseCookies","cookie","getGlobalConditions","document","referrer","campaignConditions","useAllConditions","timelineConditions","entry","getConditionsFromTimeline","form","RadioButtonType","getResultPageType","resolveMap","home","isHomeResultPage","components","isComponentsResultPage","competition","isCompetitionResultPage","business","isBusinessResultPage","unknown","SubmitButton","baseOptions","label","dispatch","allConditions","ApolloReactHooks","submitFlow","styles","button","onClick","event","then","variables","data","response","viewBox","d","transform","TextfieldType","InputAttributeType","RadioButton","output_conditions","eventHandler","input","id","name","onChange","list","htmlFor","BasicButton","Question","text","question","MimeType","TextField","sticky","placeholder","classes","classNames","textfield","textfieldNotSticky","textfieldInputTypeMap","phonenumber","tel","number","inputType","target","ButtonBack","back","Progress","percentage","progressPercentage","width","Style","ProgressCurrent","style","EventHandlerEvent","Image","images","title_text","alt_text","mimeType","defaultImage","srcSet","image","mime_type","conversion","full_url","svg","original","imageBlock","aria-label","src","alt","createEventHandler","eventHandlerMap","radio","optionSelected","valueSubmitted","wantedToGoBack","valueChanged","Block","prefetchStep","useEffect","blockType","progress","paragraph","submit","Step","client","useApolloClient","ref","React","current","gsap","fromTo","opacity","duration","useCallback","prefetchableBuildingBlocks","query","step_id","blockId","Loader","loader","xmlns","fill","StepContainer","latestTimelineEntry","render_type","errorPolicy","loading","loadedStep","GetNextStep","Number","buildingblocks","ResultHome","heroClass","row","hero","uspClass","usp","greyClass","rowGrey","greyDarkClass","rowGreyDark","tpClass","tp","result","VerisureHome","col3","uspBreakin","uspFire","uspAssault","specilList","ResultComponents","red","productList","productImage","VerisurePortal","Result","alert","Flow","firstStep","FlowContainer","App","GetFlow","console","log","process","ApolloClient","cache","InMemoryCache","possibleTypes","uri","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e01161f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/verisure-portal.39cf59c6.png\";","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type BuildingBlock = {\n  input_key: Scalars['ID'],\n};\n\nexport type BuildingBlockable = BuildingBlockParagraph | BuildingBlockTitle | BuildingBlockSubmit | BuildingBlockTextfield | BuildingBlockRadio | BuildingBlockButton | BuildingBlockQuestion | BuildingBlockBack | BuildingBlockProgress | BuildingBlockImage | BuildingBlockMessage;\n\nexport type BuildingBlockBack = BuildingBlock & {\n   __typename?: 'BuildingBlockBack',\n  input_key: Scalars['ID'],\n  buildingblock_type: Scalars['String'],\n};\n\nexport type BuildingBlockButton = BuildingBlock & {\n   __typename?: 'BuildingBlockButton',\n  input_key: Scalars['ID'],\n  output_conditions: Array<Maybe<OutputCondition>>,\n  label: Scalars['String'],\n  type: Scalars['String'],\n};\n\nexport type BuildingBlockImage = BuildingBlock & {\n   __typename?: 'BuildingBlockImage',\n  input_key: Scalars['ID'],\n  alt_text: Scalars['String'],\n  title_text: Scalars['String'],\n  images: Array<Maybe<Image>>,\n  responsive_images?: Maybe<Array<Maybe<ResponsiveImage>>>,\n};\n\nexport type BuildingBlockMessage = BuildingBlock & {\n   __typename?: 'BuildingBlockMessage',\n  input_key: Scalars['ID'],\n  html: Scalars['String'],\n  markdown: Scalars['String'],\n};\n\nexport type BuildingBlockParagraph = BuildingBlock & {\n   __typename?: 'BuildingBlockParagraph',\n  input_key: Scalars['ID'],\n  type: Scalars['String'],\n  html: Scalars['String'],\n  markdown: Scalars['String'],\n};\n\nexport type BuildingBlockProgress = BuildingBlock & {\n   __typename?: 'BuildingBlockProgress',\n  input_key: Scalars['ID'],\n  percentage?: Maybe<Scalars['Int']>,\n};\n\nexport type BuildingBlockQuestion = BuildingBlock & {\n   __typename?: 'BuildingBlockQuestion',\n  input_key: Scalars['ID'],\n  text: Scalars['String'],\n};\n\nexport type BuildingBlockRadio = BuildingBlock & {\n   __typename?: 'BuildingBlockRadio',\n  input_key: Scalars['ID'],\n  output_conditions: Array<Maybe<OutputCondition>>,\n  type: Scalars['String'],\n  label: Scalars['String'],\n};\n\nexport type BuildingBlockSubmit = BuildingBlock & {\n   __typename?: 'BuildingBlockSubmit',\n  input_key: Scalars['ID'],\n  output_conditions: Array<Maybe<OutputCondition>>,\n  label: Scalars['String'],\n};\n\nexport type BuildingBlockTextfield = BuildingBlock & {\n   __typename?: 'BuildingBlockTextfield',\n  input_key: Scalars['ID'],\n  output_conditions: Array<Maybe<OutputCondition>>,\n  sticky: Scalars['String'],\n  type: Scalars['String'],\n  placeholder: Scalars['String'],\n};\n\nexport type BuildingBlockTitle = BuildingBlock & {\n   __typename?: 'BuildingBlockTitle',\n  input_key: Scalars['ID'],\n  title: Scalars['String'],\n};\n\nexport type Image = {\n   __typename?: 'Image',\n  conversion: Scalars['String'],\n  url?: Maybe<Scalars['String']>,\n  full_url: Scalars['String'],\n  mime_type: Scalars['String'],\n};\n\nexport type InputCondition = {\n  input_key: Scalars['String'],\n  input_value: Scalars['String'],\n  input_type: Scalars['String'],\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  SubmitFlow: Result,\n};\n\n\nexport type MutationSubmitFlowArgs = {\n  data: Array<InputCondition>\n};\n\nexport type OrderByClause = {\n  field: Scalars['String'],\n  order: SortOrder,\n};\n\nexport type OutputCondition = {\n   __typename?: 'outputCondition',\n  input_key: Scalars['String'],\n  input_value: Scalars['String'],\n  input_type: Scalars['String'],\n};\n\nexport type PageInfo = {\n   __typename?: 'PageInfo',\n  hasNextPage: Scalars['Boolean'],\n  hasPreviousPage: Scalars['Boolean'],\n  startCursor?: Maybe<Scalars['String']>,\n  endCursor?: Maybe<Scalars['String']>,\n  total?: Maybe<Scalars['Int']>,\n  count?: Maybe<Scalars['Int']>,\n  currentPage?: Maybe<Scalars['Int']>,\n  lastPage?: Maybe<Scalars['Int']>,\n};\n\nexport type PaginatorInfo = {\n   __typename?: 'PaginatorInfo',\n  count: Scalars['Int'],\n  currentPage: Scalars['Int'],\n  firstItem?: Maybe<Scalars['Int']>,\n  hasMorePages: Scalars['Boolean'],\n  lastItem?: Maybe<Scalars['Int']>,\n  lastPage: Scalars['Int'],\n  perPage: Scalars['Int'],\n  total: Scalars['Int'],\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  GetNextStep: Step,\n  GetFlow: Step,\n};\n\n\nexport type QueryGetNextStepArgs = {\n  step_id: Scalars['ID'],\n  conditions: Array<Maybe<InputCondition>>\n};\n\n\nexport type QueryGetFlowArgs = {\n  conditions: Array<InputCondition>\n};\n\nexport type ResponsiveImage = {\n   __typename?: 'ResponsiveImage',\n  input_key: Scalars['ID'],\n  url: Scalars['String'],\n};\n\nexport type Result = {\n   __typename?: 'Result',\n  message: Scalars['String'],\n};\n\nexport enum SortOrder {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type Step = {\n   __typename?: 'Step',\n  step_id?: Maybe<Scalars['ID']>,\n  flow_id?: Maybe<Scalars['ID']>,\n  render_type: Scalars['String'],\n  message?: Maybe<Scalars['String']>,\n  hero_banner?: Maybe<Scalars['String']>,\n  title?: Maybe<Scalars['String']>,\n  progress?: Maybe<Scalars['Int']>,\n  redirect_url?: Maybe<Scalars['String']>,\n  buildingblocks?: Maybe<Array<Maybe<BuildingBlockable>>>,\n};\n\nexport enum Trashed {\n  Only = 'ONLY',\n  With = 'WITH',\n  Without = 'WITHOUT'\n}\n\nexport type SubmitFlowMutationVariables = {\n  data: Array<InputCondition>\n};\n\n\nexport type SubmitFlowMutation = (\n  { __typename?: 'Mutation' }\n  & { SubmitFlow: (\n    { __typename?: 'Result' }\n    & Pick<Result, 'message'>\n  ) }\n);\n\nexport type GetFlowQueryVariables = {};\n\n\nexport type GetFlowQuery = (\n  { __typename?: 'Query' }\n  & { GetFlow: (\n    { __typename?: 'Step' }\n    & Pick<Step, 'step_id' | 'render_type' | 'message' | 'progress' | 'title' | 'redirect_url'>\n    & { buildingblocks: Maybe<Array<Maybe<(\n      { __typename: 'BuildingBlockParagraph' }\n      & Pick<BuildingBlockParagraph, 'type' | 'markdown' | 'html'>\n    ) | (\n      { __typename: 'BuildingBlockTitle' }\n      & Pick<BuildingBlockTitle, 'title'>\n    ) | (\n      { __typename: 'BuildingBlockSubmit' }\n      & Pick<BuildingBlockSubmit, 'input_key' | 'label'>\n      & { output_conditions: Array<Maybe<(\n        { __typename?: 'outputCondition' }\n        & Pick<OutputCondition, 'input_key' | 'input_value' | 'input_type'>\n      )>> }\n    ) | (\n      { __typename: 'BuildingBlockTextfield' }\n      & Pick<BuildingBlockTextfield, 'input_key' | 'sticky' | 'type' | 'placeholder'>\n      & { output_conditions: Array<Maybe<(\n        { __typename?: 'outputCondition' }\n        & Pick<OutputCondition, 'input_key' | 'input_value' | 'input_type'>\n      )>> }\n    ) | (\n      { __typename: 'BuildingBlockRadio' }\n      & Pick<BuildingBlockRadio, 'input_key' | 'type' | 'label'>\n      & { output_conditions: Array<Maybe<(\n        { __typename?: 'outputCondition' }\n        & Pick<OutputCondition, 'input_key' | 'input_value' | 'input_type'>\n      )>> }\n    ) | (\n      { __typename: 'BuildingBlockButton' }\n      & Pick<BuildingBlockButton, 'input_key' | 'label' | 'type'>\n      & { output_conditions: Array<Maybe<(\n        { __typename?: 'outputCondition' }\n        & Pick<OutputCondition, 'input_key' | 'input_value' | 'input_type'>\n      )>> }\n    ) | (\n      { __typename: 'BuildingBlockQuestion' }\n      & Pick<BuildingBlockQuestion, 'text'>\n    ) | { __typename: 'BuildingBlockBack' } | (\n      { __typename: 'BuildingBlockProgress' }\n      & Pick<BuildingBlockProgress, 'percentage'>\n    ) | (\n      { __typename: 'BuildingBlockImage' }\n      & Pick<BuildingBlockImage, 'alt_text' | 'title_text'>\n      & { images: Array<Maybe<(\n        { __typename?: 'Image' }\n        & Pick<Image, 'conversion' | 'url' | 'full_url' | 'mime_type'>\n      )>>, responsive_images: Maybe<Array<Maybe<(\n        { __typename?: 'ResponsiveImage' }\n        & Pick<ResponsiveImage, 'input_key' | 'url'>\n      )>>> }\n    ) | (\n      { __typename: 'BuildingBlockMessage' }\n      & Pick<BuildingBlockMessage, 'markdown' | 'html'>\n    )>>> }\n  ) }\n);\n\nexport type GetStepQueryVariables = {\n  step_id: Scalars['ID'],\n  conditions: Array<InputCondition>\n};\n\n\nexport type GetStepQuery = (\n  { __typename?: 'Query' }\n  & { GetNextStep: (\n    { __typename?: 'Step' }\n    & Pick<Step, 'step_id' | 'render_type' | 'message' | 'progress' | 'title' | 'redirect_url'>\n    & { buildingblocks: Maybe<Array<Maybe<(\n      { __typename: 'BuildingBlockParagraph' }\n      & Pick<BuildingBlockParagraph, 'type' | 'markdown' | 'html'>\n    ) | (\n      { __typename: 'BuildingBlockTitle' }\n      & Pick<BuildingBlockTitle, 'title'>\n    ) | (\n      { __typename: 'BuildingBlockSubmit' }\n      & Pick<BuildingBlockSubmit, 'input_key' | 'label'>\n      & { output_conditions: Array<Maybe<(\n        { __typename?: 'outputCondition' }\n        & Pick<OutputCondition, 'input_key' | 'input_value' | 'input_type'>\n      )>> }\n    ) | (\n      { __typename: 'BuildingBlockTextfield' }\n      & Pick<BuildingBlockTextfield, 'input_key' | 'sticky' | 'type' | 'placeholder'>\n      & { output_conditions: Array<Maybe<(\n        { __typename?: 'outputCondition' }\n        & Pick<OutputCondition, 'input_key' | 'input_value' | 'input_type'>\n      )>> }\n    ) | (\n      { __typename: 'BuildingBlockRadio' }\n      & Pick<BuildingBlockRadio, 'input_key' | 'type' | 'label'>\n      & { output_conditions: Array<Maybe<(\n        { __typename?: 'outputCondition' }\n        & Pick<OutputCondition, 'input_key' | 'input_value' | 'input_type'>\n      )>> }\n    ) | (\n      { __typename: 'BuildingBlockButton' }\n      & Pick<BuildingBlockButton, 'input_key' | 'label' | 'type'>\n      & { output_conditions: Array<Maybe<(\n        { __typename?: 'outputCondition' }\n        & Pick<OutputCondition, 'input_key' | 'input_value' | 'input_type'>\n      )>> }\n    ) | (\n      { __typename: 'BuildingBlockQuestion' }\n      & Pick<BuildingBlockQuestion, 'text'>\n    ) | { __typename: 'BuildingBlockBack' } | (\n      { __typename: 'BuildingBlockProgress' }\n      & Pick<BuildingBlockProgress, 'percentage'>\n    ) | (\n      { __typename: 'BuildingBlockImage' }\n      & Pick<BuildingBlockImage, 'alt_text' | 'title_text'>\n      & { images: Array<Maybe<(\n        { __typename?: 'Image' }\n        & Pick<Image, 'conversion' | 'url' | 'full_url' | 'mime_type'>\n      )>>, responsive_images: Maybe<Array<Maybe<(\n        { __typename?: 'ResponsiveImage' }\n        & Pick<ResponsiveImage, 'input_key' | 'url'>\n      )>>> }\n    ) | (\n      { __typename: 'BuildingBlockMessage' }\n      & Pick<BuildingBlockMessage, 'markdown' | 'html'>\n    )>>> }\n  ) }\n);\n\n\nexport const SubmitFlowDocument = gql`\n    mutation SubmitFlow($data: [InputCondition!]!) {\n  SubmitFlow(data: $data) {\n    message\n  }\n}\n    `;\nexport type SubmitFlowMutationFn = ApolloReactCommon.MutationFunction<SubmitFlowMutation, SubmitFlowMutationVariables>;\n\n/**\n * __useSubmitFlowMutation__\n *\n * To run a mutation, you first call `useSubmitFlowMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubmitFlowMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [submitFlowMutation, { data, loading, error }] = useSubmitFlowMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useSubmitFlowMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitFlowMutation, SubmitFlowMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubmitFlowMutation, SubmitFlowMutationVariables>(SubmitFlowDocument, baseOptions);\n      }\nexport type SubmitFlowMutationHookResult = ReturnType<typeof useSubmitFlowMutation>;\nexport type SubmitFlowMutationResult = ApolloReactCommon.MutationResult<SubmitFlowMutation>;\nexport type SubmitFlowMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitFlowMutation, SubmitFlowMutationVariables>;\nexport const GetFlowDocument = gql`\n    query GetFlow {\n  GetFlow(conditions: []) {\n    step_id\n    render_type\n    message\n    progress\n    title\n    redirect_url\n    buildingblocks {\n      __typename\n      ... on BuildingBlockTitle {\n        title\n      }\n      ... on BuildingBlockParagraph {\n        type\n        markdown\n        html\n      }\n      ... on BuildingBlockMessage {\n        markdown\n        html\n      }\n      ... on BuildingBlockSubmit {\n        input_key\n        label\n        output_conditions {\n          input_key\n          input_value\n          input_type\n        }\n      }\n      ... on BuildingBlockTextfield {\n        input_key\n        sticky\n        type\n        placeholder\n        output_conditions {\n          input_key\n          input_value\n          input_type\n        }\n      }\n      ... on BuildingBlockRadio {\n        input_key\n        type\n        label\n        output_conditions {\n          input_key\n          input_value\n          input_type\n        }\n      }\n      ... on BuildingBlockButton {\n        input_key\n        label\n        type\n        output_conditions {\n          input_key\n          input_value\n          input_type\n        }\n      }\n      ... on BuildingBlockQuestion {\n        text\n      }\n      ... on BuildingBlockProgress {\n        percentage\n      }\n      ... on BuildingBlockImage {\n        alt_text\n        title_text\n        images {\n          conversion\n          url\n          full_url\n          mime_type\n        }\n        responsive_images {\n          input_key\n          url\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetFlowQuery__\n *\n * To run a query within a React component, call `useGetFlowQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetFlowQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetFlowQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetFlowQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetFlowQuery, GetFlowQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetFlowQuery, GetFlowQueryVariables>(GetFlowDocument, baseOptions);\n      }\nexport function useGetFlowLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFlowQuery, GetFlowQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetFlowQuery, GetFlowQueryVariables>(GetFlowDocument, baseOptions);\n        }\nexport type GetFlowQueryHookResult = ReturnType<typeof useGetFlowQuery>;\nexport type GetFlowLazyQueryHookResult = ReturnType<typeof useGetFlowLazyQuery>;\nexport type GetFlowQueryResult = ApolloReactCommon.QueryResult<GetFlowQuery, GetFlowQueryVariables>;\nexport const GetStepDocument = gql`\n    query GetStep($step_id: ID!, $conditions: [InputCondition!]!) {\n  GetNextStep(step_id: $step_id, conditions: $conditions) {\n    step_id\n    render_type\n    message\n    progress\n    title\n    redirect_url\n    buildingblocks {\n      __typename\n      ... on BuildingBlockTitle {\n        title\n      }\n      ... on BuildingBlockParagraph {\n        type\n        markdown\n        html\n      }\n      ... on BuildingBlockMessage {\n        markdown\n        html\n      }\n      ... on BuildingBlockSubmit {\n        input_key\n        label\n        output_conditions {\n          input_key\n          input_value\n          input_type\n        }\n      }\n      ... on BuildingBlockTextfield {\n        input_key\n        sticky\n        type\n        placeholder\n        output_conditions {\n          input_key\n          input_value\n          input_type\n        }\n      }\n      ... on BuildingBlockRadio {\n        input_key\n        type\n        label\n        output_conditions {\n          input_key\n          input_value\n          input_type\n        }\n      }\n      ... on BuildingBlockButton {\n        input_key\n        label\n        type\n        output_conditions {\n          input_key\n          input_value\n          input_type\n        }\n      }\n      ... on BuildingBlockQuestion {\n        text\n      }\n      ... on BuildingBlockProgress {\n        percentage\n      }\n      ... on BuildingBlockImage {\n        alt_text\n        title_text\n        images {\n          conversion\n          url\n          full_url\n          mime_type\n        }\n        responsive_images {\n          input_key\n          url\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetStepQuery__\n *\n * To run a query within a React component, call `useGetStepQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetStepQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetStepQuery({\n *   variables: {\n *      step_id: // value for 'step_id'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useGetStepQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetStepQuery, GetStepQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetStepQuery, GetStepQueryVariables>(GetStepDocument, baseOptions);\n      }\nexport function useGetStepLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetStepQuery, GetStepQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetStepQuery, GetStepQueryVariables>(GetStepDocument, baseOptions);\n        }\nexport type GetStepQueryHookResult = ReturnType<typeof useGetStepQuery>;\nexport type GetStepLazyQueryHookResult = ReturnType<typeof useGetStepLazyQuery>;\nexport type GetStepQueryResult = ApolloReactCommon.QueryResult<GetStepQuery, GetStepQueryVariables>;","export enum ActionType {\n    setCurrentStep = '@flowContext/set-current-step',\n    addToTimeline = '@flowContext/add-to-timeline',\n    removeLastFromTimeline = '@flowContext/remove-last-from-timeline',\n    addGlobalConditions = '@flowContext/add-global-conditions',\n    getResultPage = '@flowContext/get-result-page',\n    updateCurrentInputConditions = '@flowContext/update-current-input-value',\n    addCurrentInputValueToTimeline = '@flowContext/add-current-input-value-to-timeline',\n}\n","import { Timeline, TimelineEntry } from \"../ts/types\";\n\nexport const getLatestEntryFromTimeline = (timeline: Timeline): TimelineEntry | undefined => timeline[timeline.length - 1];\n// TODO: This is not really pretty is it?:\nexport const getFakeTimelineEntry = (): TimelineEntry => ({ step: { step_id: null, render_type: ''}, conditions: [] });\n","export enum TransistionState {\n    idle,\n    exiting,\n    exited,\n}\n","export const collectionWithoutTypename = (collection: Array<any>) => collection.map((item): Array<any> => {\n    if (item.__typename !== undefined) {\n        const { __typename, ...filteredItem } = item;\n        return filteredItem;\n    }\n    return item;\n});\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { ActionType } from 'ts/enums/ActionType';\nimport { Action, FlowContextState } from 'ts/types';\nimport { getLatestEntryFromTimeline } from \"../helpers/steps\";\nimport { TransistionState } from \"../ts/enums/TransistionState\";\nimport { collectionWithoutTypename } from \"../helpers/data\";\n\nconst initialState: FlowContextState = {\n    currentStep: null,\n    backStep: null,\n    timeline: [],\n    stepTransitionState: TransistionState.exiting,\n    globalConditions: [],\n    currentInputConditions: [],\n    resultPageType: null,\n};\n\nconst flowReducer = (state: FlowContextState, action: Action) => {\n    switch (action.type) {\n        case ActionType.updateCurrentInputConditions:\n            return {\n                ...state,\n                currentInputConditions: action.conditions\n            };\n        case ActionType.addGlobalConditions: {\n            if (!action.conditions) {\n                return state;\n            }\n            return {\n                ...state,\n                globalConditions: [...state.globalConditions, ...action.conditions]\n            }\n        }\n        case ActionType.setCurrentStep: {\n            return {\n                ...state,\n                currentStep: action.step,\n            };\n        }\n        // This action is used for going forward in flow.\n        case ActionType.addToTimeline: {\n            return {\n                ...state,\n                timeline: [...state.timeline, {\n                    step: state.currentStep,\n                    // TODO: Fix error:\n                    // @ts-ignore\n                    conditions: collectionWithoutTypename(action.conditions),\n                }],\n                backStep: null,\n            };\n        }\n        // This action is used for going back in flow.\n        case ActionType.removeLastFromTimeline: {\n            let timeline = [...state.timeline];\n            let lastEntry = getLatestEntryFromTimeline(timeline);\n\n            // If we have entries in the timeline get rid of the latest entry.\n            if (timeline.length > 0) {\n                timeline = timeline.slice(0, -1);\n            }\n            // If the timeline is not empty get the last entry that we will use as the current step.\n            if (timeline.length) {\n                lastEntry = getLatestEntryFromTimeline(timeline);\n            }\n\n            return {\n                ...state,\n                timeline,\n                ...(lastEntry ? { currentStep: lastEntry.step } : {}),\n                // This is used for keeping the step we went back from, because we cannot fetch it from timeline.\n                // Only steps with values are stored there.\n                backStep: state.currentStep,\n            }\n        }\n        case ActionType.getResultPage: {\n            return {\n                ...state,\n                resultPageType: action.resultType,\n            }\n        }\n        default: {\n            // TODO: Create error handler.\n            throw new Error(`Unhandled action type: ${action.type}`);\n        }\n    }\n};\n\nexport const StateContext = createContext(initialState);\n\nexport const StateProvider = ({ children }: { children: any }) => (\n    // TODO: Fix:\n    // @ts-ignore\n    <StateContext.Provider value={useReducer(flowReducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n);\nexport const useStateValue = () => useContext<any>(StateContext);\n","import gql from 'graphql-tag';\n\nexport const QUERY_GET_NEXT_STEP = gql`\n    query GetStep($step_id: ID!, $conditions: [InputCondition!]!){\n        GetNextStep(step_id: $step_id, conditions: $conditions){\n            step_id\n            render_type\n            message\n            progress\n            title\n            redirect_url\n            buildingblocks {\n                __typename\n                ... on BuildingBlockTitle {title}\n                ... on BuildingBlockParagraph {type markdown html}\n                ... on BuildingBlockMessage {markdown html}\n                ... on BuildingBlockSubmit {input_key label output_conditions {input_key, input_value, input_type}}\n                ... on BuildingBlockTextfield {input_key sticky type placeholder output_conditions {input_key, input_value, input_type}}\n                ... on BuildingBlockRadio {input_key type label output_conditions {input_key, input_value, input_type}}\n                ... on BuildingBlockButton {input_key label type output_conditions {input_key, input_value, input_type}}\n                ... on BuildingBlockQuestion {text}\n                ... on BuildingBlockProgress {percentage}\n                ... on BuildingBlockImage {alt_text title_text images { conversion url full_url mime_type } responsive_images { input_key url }}\n            }\n        }}\n`;\n","export enum BuildingBlockType {\n    paragraph = 'BuildingBlockParagraph',\n    question = 'BuildingBlockQuestion',\n    radio = 'BuildingBlockRadio',\n    submit = 'BuildingBlockSubmit',\n    textfield = 'BuildingBlockTextfield',\n    button = 'BuildingBlockButton',\n    title = 'BuildingBlockTitle',\n    back = 'BuildingBlockBack',\n    progress = 'BuildingBlockProgress',\n    image = 'BuildingBlockImage',\n    message = 'BuildingBlockMessage',\n}\n","export enum ConditionType {\n    form = 'form',\n    context = 'context',\n}\n","import { Conditions, Timeline, TimelineEntry } from \"../ts/types\";\nimport { ConditionType } from \"../ts/enums/ConditionType\";\nimport { InputCondition, Scalars } from \"../generated/graphql\";\n\nexport const getConditionsFromTimeline = (timeline: Timeline, conditionTypes: Array<ConditionType | string> = []): Conditions => {\n    return timeline.reduce((acc: Conditions, entry: TimelineEntry) => {\n        if (conditionTypes) {\n            acc = [...acc, ...filterConditionsByType(entry.conditions, conditionTypes)];\n        } else {\n            acc = [...acc, ...entry.conditions];\n        }\n\n        return acc;\n    }, []);\n};\n\n\nexport const filterConditionsByType = (\n    conditions: Conditions, conditionTypes: Array<ConditionType | string>\n) => conditions.filter(\n    condition => condition && condition.input_type && conditionTypes.includes(condition.input_type)\n);\n\nconst createCondition = (key: Scalars['String'], value: Scalars['String'], type: Scalars['String']): InputCondition => ({\n    input_key: key,\n    input_value: value,\n    input_type: type,\n});\n\nexport const createContextCondition = (key: Scalars['String'], value: Scalars['String']): InputCondition => {\n    return createCondition(key, value, ConditionType.context);\n};\n","export enum ConversionType {\n    onex = '1x',\n    twox = '2x',\n    threex = '3x',\n    original = 'original',\n}\n","export enum KnownQueryParameter {\n    utm_campaign = 'utm_campaign',\n}\n","export enum Cookie {\n    _gid = '_gid',\n}\n","import * as React from 'react';\nimport { BuildingBlockTitle } from 'generated/graphql';\n\n// Style\nimport Styles from './Title.module.scss';\n\nconst Title = ({ title }: BuildingBlockTitle): React.ReactElement<any> => (\n    <h1 className={Styles.title}>{title}</h1>\n);\n\nexport default Title;\n","import * as React from 'react';\nimport { BuildingBlockParagraph } from 'generated/graphql';\nimport ReactMarkdown from 'react-markdown';\n\n// Style\nimport Styles from './Paragraph.module.scss';\n\nconst Paragraph = ({markdown, type}: BuildingBlockParagraph): React.ReactElement<any> => (\n    <div className={Styles[type]}>\n        <ReactMarkdown source={markdown} />\n    </div>\n);\n\nexport default Paragraph;\n","import * as React from 'react';\nimport { BuildingBlockMessage } from 'generated/graphql';\nimport ReactMarkdown from 'react-markdown';\nimport { useStateValue } from \"../../context/FlowContext\";\n\n// Style\nimport Styles from './Message.module.scss';\n\nconst Message = ({markdown}: BuildingBlockMessage): React.ReactElement<any> => {\n    const [{ currentInputConditions }] = useStateValue();\n\n    // TODO: Refatoring find reliable way to get zipcode\n    const zipcode = currentInputConditions.reduce((acc: string, inputCondition: any) => {\n        acc = inputCondition.input_value;\n        return acc;\n    }, '');\n\n    return (\n        <React.Fragment>\n            {zipcode && (\n                <div className={Styles.zipcode}>\n                    {zipcode}\n                </div>\n            )}\n            <div className={Styles.message}>\n                <ReactMarkdown source={markdown} />\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Message;\n","export const sleep = (delay: number = 200) => {\n    return new Promise(resolve => setTimeout(resolve, delay))\n}\n","import { ConversionType } from \"./ts/enums/ConversionType\";\nimport { KnownQueryParameter } from \"./ts/enums/KnownQueryParameter\";\nimport { Cookie } from \"./ts/enums/Cookie\";\n\nexport const KNOWN_QUERY_PARAMETERS: String[] = [\n    KnownQueryParameter.utm_campaign,\n];\n\nexport const KNOWN_IMAGE_FORMATS: String[] = [\n    ConversionType.onex,\n    ConversionType.twox,\n    ConversionType.threex,\n];\n\nexport const KNOWN_COOKIES: String[] = [\n    Cookie._gid,\n];\n","export enum ConditionContext {\n    fcon = 'fcon',\n    campaign = 'campaign',\n    referrer = 'referrer',\n}\n","import { parse, ParsedUrlQuery } from \"querystring\";\nimport { KNOWN_COOKIES, KNOWN_QUERY_PARAMETERS } from \"conf\";\nimport { Conditions, Cookie } from \"../ts/types\";\nimport { createContextCondition } from \"./conditions\";\nimport { KnownQueryParameter } from \"../ts/enums/KnownQueryParameter\";\nimport { ConditionContext } from \"../ts/enums/ConditionContext\";\n\nconst getCurrentQueryParameters = (): ParsedUrlQuery => {\n    const queryString = window.location.search;\n    return parse(queryString.substring(1));\n};\n\nconst getKnownQueryParams = (): ParsedUrlQuery => {\n    const queryParams = getCurrentQueryParameters();\n    const knownParams = knownQueryParameters();\n    Object.keys(queryParams).map(property => {\n        if (!knownParams.includes(property)) {\n            delete queryParams[property];\n        }\n\n        return null;\n    });\n\n    return queryParams;\n};\n\nconst knownQueryParameters = (): String[] => {\n    return KNOWN_QUERY_PARAMETERS;\n};\n\nconst transformQueryParamsIntoConditions = (queryParams: ParsedUrlQuery): Conditions => (\n    Object.keys(queryParams).reduce((acc: Conditions, key: string) => {\n        const conditions: Conditions = [];\n        // Split utm_campaign into conditions if it match a certain pattern.\n        if (key === KnownQueryParameter.utm_campaign) {\n            const campaignConditions = splitCampaignParameterIntoConditions(String(queryParams[key]));\n            if (campaignConditions.length) {\n                return [...acc, ...campaignConditions];\n            }\n        }\n\n        // Otherwise create context conditions from the other query parameters.\n        conditions.push(createContextCondition(key, String(queryParams[key])));\n        return [...acc, ...conditions];\n    }, [])\n);\n\nconst splitCampaignParameterIntoConditions = (value: string): Conditions => {\n    const conditions = [];\n    const splitCampaign = String(value).match(/^(.*)fcon(.*)$/);\n    if (splitCampaign && splitCampaign.length === 3 ) {\n        const [, campaign, fcon] = splitCampaign;\n        conditions.push(createContextCondition(ConditionContext.campaign, campaign));\n        conditions.push(createContextCondition(ConditionContext.fcon, fcon));\n\n        return conditions;\n    }\n\n    return [];\n};\n\nconst transformReferrerIntoConditions = (referrer: string): Conditions => {\n    return [createContextCondition(ConditionContext.referrer, referrer)];\n};\n\nexport const parseCookies = (cookieString: string): Cookie[] => {\n    const cookiesRaw = cookieString.replace(/\\s/g, '').split(';');\n    return cookiesRaw.reduce((acc: Cookie[], rawCookie: string) => {\n        const [key, value] = rawCookie.split('=');\n        return [...acc, { key, value }];\n    }, []);\n};\n\nexport const getCookieConditions = (cookieString: string): Conditions => {\n    const cookies = parseCookies(cookieString);\n    return cookies.reduce((acc: Conditions, cookie: Cookie) => {\n        if (KNOWN_COOKIES.includes(cookie.key)) {\n            acc = [...acc, createContextCondition(cookie.key, cookie.value)];\n        }\n\n        return acc;\n    }, []);\n};\n\nexport const getGlobalConditions = (): Conditions => [\n    ...(document.cookie ? getCookieConditions(document.cookie) : []),\n    ...(document.referrer ? transformReferrerIntoConditions(document.referrer) : []),\n    ...transformQueryParamsIntoConditions(getKnownQueryParams()),\n];\n\n","export enum ResultType {\n    home = 'home',\n    components = 'components',\n    business = 'business',\n    competition = 'competition',\n    unknown = 'unknown',\n}\n","import { useStateValue } from \"../context/FlowContext\";\nimport { getConditionsFromTimeline } from \"./conditions\";\nimport { ConditionType } from \"../ts/enums/ConditionType\";\nimport { getGlobalConditions } from \"./globalConditions\";\n\nexport const useAllConditions = () => {\n\n    const [{ timeline }] = useStateValue();\n    const timelineConditions = getConditionsFromTimeline(timeline, [ConditionType.form]);\n    const globalConditions = getGlobalConditions();\n\n    return [...timelineConditions, ...globalConditions];\n};\n\nexport const useGlobalConditions = () => getGlobalConditions();\n","import { Conditions } from \"ts/types\";\nimport { ResultType } from \"ts/enums/ResultType\";\nimport { InputCondition } from \"../generated/graphql\";\n\nexport const getResultPageType = (conditions: Conditions): ResultType => {\n    const resolveMap = {\n        [ResultType.home]: isHomeResultPage,\n        [ResultType.components]: isComponentsResultPage,\n        [ResultType.competition]: isCompetitionResultPage,\n        [ResultType.business]: isBusinessResultPage\n    };\n    // console.log(isBusinessResultPage(conditions));\n\n    // TODO: find out why it fails\n    // @ts-ignore\n    return Object.keys(resolveMap).reduce((acc: string, type: string) => {\n        // TODO: find out why it fails\n        // @ts-ignore\n        if (resolveMap[type](conditions)) {\n            acc = type;\n        }\n        return acc;\n    }, ResultType.unknown);\n};\n\nconst isHomeResultPage = (conditions: Conditions): boolean => {\n    // TODO: change when we have the right conditions\n    return false;\n};\nconst isComponentsResultPage = (conditions: Conditions): boolean => {\n    // TODO: change when we have the right conditions\n    return false;\n};\nconst isCompetitionResultPage = (conditions: Conditions): boolean => {\n    // TODO: change when we have the right conditions\n    return false;\n};\nconst isBusinessResultPage = (conditions: Conditions): boolean => {\n    // TODO: Fix types\n    // @ts-ignore\n    return conditions.reduce((acc: any, condition: InputCondition) => {\n        // TODO: get the types fixed in the schema it sucks to write '16'.\n        if (condition.input_key === '16' && condition.input_type === 'form') {\n            acc = true;\n        }\n        return acc;\n    }, false);\n};\n","export enum RadioButtonType {\n    button = 'button',\n    list = 'list',\n}\n","import * as React from 'react';\nimport { BuildingBlockSubmit, useSubmitFlowMutation } from 'generated/graphql';\nimport { sleep } from 'helpers/blocks';\nimport { useAllConditions } from \"helpers/hooks\";\nimport { useStateValue } from 'context/FlowContext';\nimport { ActionType } from \"ts/enums/ActionType\";\nimport { getResultPageType } from 'helpers/resultPage';\n\n// Style\nimport styles from './SubmitButton.module.scss';\n\nconst SubmitButton = ({ label }: BuildingBlockSubmit): React.ReactElement<any> => {\n    const [, dispatch] = useStateValue();\n    const allConditions = useAllConditions();\n    const [submitFlow] = useSubmitFlowMutation();\n\n    const onClickHandler = (event: React.MouseEvent) => {\n        sleep().then(() => {\n            submitFlow({\n                variables: {\n                    data: allConditions,\n                }\n            }).then(response => {\n                dispatch({\n                    type: ActionType.getResultPage,\n                    resultType: getResultPageType(allConditions)\n                });\n            });\n        })\n    };\n\n    return (\n        <button className={styles.button} type=\"submit\" onClick={onClickHandler}>{label}\n            <svg viewBox=\"0 0 9.95 16.91\">\n                <path\n                    d=\"M10,8.5,1.75.34A1,1,0,0,0,.34.35a1,1,0,0,0,0,1.41L7.16,8.5h0L.34,15.25a1,1,0,0,0,1.41,1.42L10,8.5Z\"\n                    transform=\"translate(-0.05 -0.05)\"/>\n            </svg>\n        </button>\n    );\n};\n\nexport default SubmitButton;\n","import * as React from 'react';\n\n// Style\nimport styles from './RadioButton.module.scss';\nimport { RadioButtonProps } from \"../../ts/types\";\nimport { RadioButtonType } from \"../../ts/enums/RadioButtonType\";\nimport { sleep } from \"../../helpers/blocks\";\n\nconst RadioButton = ({\n    input_key,\n    type,\n    label,\n    output_conditions,\n    eventHandler\n}: RadioButtonProps): JSX.Element => {\n    const onChangeHandler = () => {\n        switch(type) {\n        case RadioButtonType.button:\n            sleep().then(() => eventHandler(output_conditions));\n            break;\n        case RadioButtonType.list:\n            eventHandler(output_conditions);\n            break;\n        }\n    };\n\n    return (\n        <div className={styles[type]}>\n            <input className={styles.input}\n                   id={input_key}\n                   type=\"radio\"\n                   name={input_key}\n                   value={input_key}\n                   onChange={onChangeHandler}\n            />\n            <label className={styles.label} htmlFor={input_key}>{label}</label>\n        </div>\n    );\n};\n\nexport default RadioButton;\n","export enum TextfieldType {\n    zipcode = 'zipcode',\n    phonenumber = 'phonenumber',\n    unknown = 'unknown',\n}\n","export enum InputAttributeType {\n    number = 'number',\n    tel = 'tel',\n}\n","import * as React from 'react';\nimport { sleep } from 'helpers/blocks';\nimport { BasicButtonProps } from 'ts/types';\nimport { useStateValue } from \"../../context/FlowContext\";\n\n// Style\nimport styles from './Button.module.scss';\n\nconst BasicButton = ({ label, type, eventHandler, output_conditions }: BasicButtonProps): React.ReactElement<any> => {\n    const [{ currentInputConditions }] = useStateValue();\n\n    const onClickHandler = () => sleep().then(() => {\n        const conditions = [\n            // If a value has been entered by another building block eg. a text field then add that.\n            ...(currentInputConditions.length ? currentInputConditions : []),\n            // If the building block has output conditions on its own use those.\n            ...(output_conditions.length ? output_conditions : []),\n        ];\n\n        if (conditions.length) {\n            return eventHandler(conditions);\n        }\n    });\n\n    return (\n        <button className={styles[type]} type=\"button\" onClick={onClickHandler}>{label}</button>\n    );\n};\n\nexport default BasicButton;\n","import * as React from 'react';\nimport { BuildingBlockQuestion } from 'generated/graphql';\n\n// Style\nimport Styles from './Question.module.scss';\n\nconst Question = ({text}: BuildingBlockQuestion): React.ReactElement<any> => (\n    <h2 className={Styles.question}>{text}</h2>\n);\n\nexport default Question;\n","import * as React from 'react';\nimport classNames from 'classnames';\n\n// Styles\nimport Styles from './TextField.module.scss';\nimport { TextfieldInputTypeMap, TextfieldProps } from \"../../ts/types\";\nimport { ConditionType } from \"../../ts/enums/ConditionType\";\nimport { TextfieldType } from \"../../ts/enums/TextfieldType\";\nimport { InputAttributeType } from \"../../ts/enums/InputAttributeType\";\n\nconst TextField = ({\n    input_key,\n    sticky,\n    type,\n    placeholder,\n    eventHandler\n}: TextfieldProps): JSX.Element => {\n    const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        eventHandler([{ input_key, input_value: event.target.value, input_type: ConditionType.form }]);\n    };\n\n    const classes = classNames( Styles.textfield, { [Styles.textfieldNotSticky]: sticky });\n\n    const textfieldInputTypeMap: TextfieldInputTypeMap = {\n        [TextfieldType.phonenumber]: InputAttributeType.tel,\n        [TextfieldType.zipcode]: InputAttributeType.number,\n        [TextfieldType.unknown]: type,\n    };\n    const inputType = textfieldInputTypeMap[type] || textfieldInputTypeMap[TextfieldType.unknown];\n\n    return (\n        <div className={classes}>\n            <input\n                type={inputType}\n                placeholder={placeholder}\n                id={input_key}\n                name={input_key}\n                onChange={onChangeHandler}/>\n        </div>\n    );\n};\n\nexport default TextField;\n","export enum MimeType {\n    jpg = 'image/jpeg',\n    png = 'image/png',\n    svg = 'image/svg+xml',\n    unknown = 'unknown',\n}\n","import * as React from 'react';\n\n// Style\nimport styles from './Button.module.scss';\nimport { ButtonBackProps } from \"../../ts/types\";\n\nconst ButtonBack = ({ eventHandler }: ButtonBackProps): JSX.Element => {\n\n    return (\n        <button className={styles.back} type=\"button\" onClick={eventHandler}>\n            <svg viewBox=\"0 0 9.95 16.91\">\n                <path\n                    d=\"M10,8.5,1.75.34A1,1,0,0,0,.34.35a1,1,0,0,0,0,1.41L7.16,8.5h0L.34,15.25a1,1,0,0,0,1.41,1.42L10,8.5Z\"\n                    transform=\"translate(-0.05 -0.05)\"/>\n            </svg>\n        </button>\n    );\n}\n\nexport default ButtonBack;\n","import * as React from 'react';\nimport { BuildingBlockProgress } from 'generated/graphql';\n\n// Style\nimport Style from './Progress.module.scss';\n\nconst Progress = ({percentage}: BuildingBlockProgress): React.ReactElement<any> => {\n\n    const progressPercentage = {\n        width: `${percentage}%`\n    };\n\n    return (\n        <div className={Style.Progress}>\n            <div className={Style.ProgressCurrent} style={progressPercentage}></div>\n        </div>\n    );\n}\n\nexport default Progress;\n","export enum EventHandlerEvent {\n    unknown,\n    valueChanged,\n    valueSubmitted,\n    optionSelected,\n    wantedToGoBack,\n}\n","import * as React from 'react';\nimport { BuildingBlockImage } from 'generated/graphql';\nimport { MimeType } from 'ts/enums/MimeType';\nimport { ConversionType } from 'ts/enums/ConversionType';\nimport { KNOWN_IMAGE_FORMATS } from 'conf';\n\n// Styles\nimport Styles from './Image.module.scss';\n\nconst Image = ({images, title_text, alt_text}: BuildingBlockImage): React.ReactElement<any> => {\n\n    let mimeType = MimeType.unknown;\n    let defaultImage = '';\n\n    // TODO: switch any type\n    const srcSet = images.reduce((acc: string, image: any) => {\n        mimeType = image.mime_type;\n\n        if(image.conversion === ConversionType.onex) {\n            defaultImage = image.full_url;\n        }\n\n        if(KNOWN_IMAGE_FORMATS.includes(image.conversion)) {\n            acc = `${acc} ${image.full_url} ${image.conversion},`;\n        }\n\n        if(mimeType === MimeType.svg && image.conversion === ConversionType.original) {\n            acc = image.full_url;\n        }\n\n        return acc;\n    }, '');\n\n    switch (mimeType) {\n        // TODO: find out why it's not comparable\n        //@ts-ignore\n        case MimeType.svg:\n            return (\n                <div className={Styles.imageBlock}>\n                    <object className={Styles.image} type=\"image/svg+xml\" aria-label={alt_text} data={srcSet}></object>\n                </div>\n            );\n        default:\n            return (\n                <div className={Styles.imageBlock}>\n                    <picture className={Styles.image}>\n                        <source srcSet={srcSet}/>\n                        <img src={defaultImage} alt={alt_text} title={title_text} />\n                    </picture>\n                </div>\n            );\n    }\n}\n\nexport default Image;\n","import {  EventHandler, InputHandlerMap, EventHandlerWithConditions } from \"../ts/types\";\nimport { EventHandlerEvent } from \"../ts/enums/EventHandlerEvent\";\nimport { ActionType } from \"../ts/enums/ActionType\";\nimport { Maybe, OutputCondition } from \"../generated/graphql\";\nimport { BuildingBlockType } from \"../ts/enums/BuildingBlockType\";\nimport { Dispatch, Reducer, ReducerAction } from \"react\";\n\nexport const createEventHandler = ({\n    __typename,\n    dispatch\n}: {\n    __typename: BuildingBlockType,\n    dispatch: Dispatch<ReducerAction<Reducer<object, object>>>\n}): EventHandlerWithConditions | EventHandler | null => {\n\n    const eventHandlerMap: InputHandlerMap = {\n        [EventHandlerEvent.unknown]: EventHandlerEvent.unknown,\n        [BuildingBlockType.radio]: EventHandlerEvent.optionSelected,\n        [BuildingBlockType.button]: EventHandlerEvent.valueSubmitted,\n        [BuildingBlockType.back]: EventHandlerEvent.wantedToGoBack,\n        [BuildingBlockType.textfield]: EventHandlerEvent.valueChanged,\n    };\n\n    const event = eventHandlerMap[__typename] || eventHandlerMap[EventHandlerEvent.unknown];\n\n    switch (event) {\n        case EventHandlerEvent.optionSelected:\n            return (conditions: Array<Maybe<OutputCondition>>) => dispatch({ type: ActionType.addToTimeline, conditions });\n\n        case EventHandlerEvent.valueChanged:\n            return (conditions: Array<Maybe<OutputCondition>>) => dispatch({ type: ActionType.updateCurrentInputConditions, conditions });\n\n        case EventHandlerEvent.valueSubmitted:\n            return (conditions: Array<Maybe<OutputCondition>>) => dispatch({ type: ActionType.addToTimeline, conditions });\n\n        case EventHandlerEvent.wantedToGoBack:\n            return () => dispatch({ type: ActionType.removeLastFromTimeline });\n    }\n\n    return null;\n};\n","import * as React from 'react';\nimport { useEffect } from 'react';\nimport { BlockProps } from 'ts/types';\nimport { BuildingBlockType } from 'ts/enums/BuildingBlockType';\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nimport Message from './Message';\nimport SubmitButton from './SubmitButton/SubmitButton';\nimport RadioButton from \"./RadioButton\";\nimport BasicButton from './Button';\nimport Question from './Question';\nimport TextField from './TextField';\nimport ButtonBack from './ButtonBack';\nimport Progress from './Progress';\nimport Image from './Image';\nimport { createEventHandler } from \"../../helpers/eventHandler\";\nimport { useStateValue } from \"../../context/FlowContext\";\n\nconst Block = ({ type, data, prefetchStep }: BlockProps): React.ReactElement<any> | null => {\n    const [, dispatch] = useStateValue();\n\n    // Prefetch step for all building blocks that support it.\n    useEffect(() => {\n        prefetchStep({ blockType: type, ...data});\n    }, [type, data, prefetchStep]);\n\n    switch (type) {\n        case BuildingBlockType.back:\n            // TODO fix error.\n            // @ts-ignore\n            return (<ButtonBack eventHandler={createEventHandler({ ...data, dispatch })} />);\n        case BuildingBlockType.progress:\n            return (<Progress {...data}/>);\n        case BuildingBlockType.question:\n            return (<Question {...data} />);\n        case BuildingBlockType.title:\n            return (<Title {...data} />);\n        case BuildingBlockType.paragraph:\n            return (<Paragraph {...data} />);\n        case BuildingBlockType.radio:\n            return (<RadioButton {...data} eventHandler={createEventHandler({ ...data, dispatch })} />);\n        case BuildingBlockType.message:\n            return (<Message {...data} />);\n        case BuildingBlockType.button:\n            return (<BasicButton {...data} eventHandler={createEventHandler({ ...data, dispatch })} />);\n        case BuildingBlockType.textfield:\n            return (<TextField {...data} eventHandler={createEventHandler({ ...data, dispatch })}/>);\n        case BuildingBlockType.submit:\n            return (<SubmitButton {...data} />);\n        case BuildingBlockType.image:\n            return (<Image {...data} />);\n        default:\n            return null;\n    }\n};\n\nexport default Block;\n","import * as React from 'react';\nimport { useCallback } from 'react';\nimport { useApolloClient } from \"react-apollo-hooks\";\nimport { QUERY_GET_NEXT_STEP } from \"./query\";\nimport { PrefetchParams, StepProps } from 'ts/types';\nimport { BuildingBlockType } from \"ts/enums/BuildingBlockType\";\nimport { ConditionType } from \"ts/enums/ConditionType\";\nimport { filterConditionsByType } from \"helpers/conditions\";\nimport { collectionWithoutTypename } from 'helpers/data';\nimport Block from 'components/Blocks/Block';\nimport gsap from \"gsap\";\n\n// Styles\nimport Styles from './Step.module.scss';\n\nconst Step = ({ id, children }: StepProps): React.ReactElement<any> =>  {\n    const client = useApolloClient();\n    const ref = React.createRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if(ref.current){\n            gsap.fromTo(ref.current, {opacity:0}, {opacity:1, duration: 0.5});\n        }\n    }, [ref])\n\n    const prefetchStep = useCallback(\n        (\n            // TODO: Define types in types document:\n            { output_conditions: conditions, blockType }: PrefetchParams\n        ) => {\n\n            // TODO: Define prefetchable blocks somewhere in a conf like place.\n            //  But things will also change when we get conditions back on building blocks.\n            const prefetchableBuildingBlocks: Array<BuildingBlockType> = [\n                BuildingBlockType.radio,\n            ];\n\n            if (!conditions || !prefetchableBuildingBlocks.includes(blockType)) {\n                return;\n            }\n\n            client.query({\n                query: QUERY_GET_NEXT_STEP,\n                variables: {\n                    // TODO: Make sure that step_id type does not vary.\n                    // TODO: When API is responding with input type on building blocks the use that!\n                    step_id: String(id),\n                    conditions: collectionWithoutTypename(\n                        filterConditionsByType(conditions, [ConditionType.form])\n                    )\n                }\n            });\n        },\n        [id, client],\n    );\n\n    return (\n        <React.Fragment>\n            <div className={Styles.step} ref={ref}>\n                {children && children.map(\n                    (data:any, blockId: number) => !!data && (\n                        <React.Fragment key={`${id}-${blockId}`}>\n                            <Block type={data.__typename} data={data} prefetchStep={prefetchStep}/>\n                    </React.Fragment>\n                    )\n                )}\n            </div>\n        </React.Fragment>\n    );\n};\nexport default Step;\n","import * as React from 'react';\nimport gsap from 'gsap';\n\n// Style\nimport Styles from './Loader.module.scss';\n\nconst Loader = (): React.ReactElement<any> => {\n    const ref = React.createRef<HTMLDivElement>();\n\n    React.useLayoutEffect(() => {\n        if(ref.current){\n            gsap.fromTo(ref.current, {opacity:0}, {opacity:1, duration: 0.3, delay: 0.6});\n        }\n    }, [ref])\n\n    return (\n        <div className={Styles.loader} ref={ref}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n                <path fill=\"#DCDDDE\" d=\"M50,25.56a24.44,24.44,0,0,0-1.54,48.83A24,24,0,0,0,66.63,67.8,24.46,24.46,0,0,0,50,25.56\"/>\n                <path fill=\"#DCDDDE\" d=\"M67.44,68.88a25.36,25.36,0,0,1-17.56,7q-.83,0-1.65-.06a25.76,25.76,0,1,1,19.21-7ZM82.92,24A24.32,24.32,0,0,1,64.37,10.41a15.85,15.85,0,0,0-28.7,0A24.3,24.3,0,0,1,17.12,24,16,16,0,0,0,8.24,51.45,25.09,25.09,0,0,1,15.33,73.7C13,87,26.81,97.14,38.56,90.76a24,24,0,0,1,22.92,0C73.23,97.14,87.08,87,84.72,73.7c-1.11-6.2-.63-14.94,7-22.13C101.41,42.35,96.15,25.87,82.92,24Z\"/>\n            </svg>\n        </div>\n    )\n};\n\nexport default Loader;\n","import * as React from 'react';\nimport { useEffect } from \"react\";\nimport Step from './Step';\nimport { useStateValue } from 'context/FlowContext';\nimport { getLatestEntryFromTimeline, getFakeTimelineEntry } from \"helpers/steps\";\nimport { ActionType } from \"ts/enums/ActionType\";\nimport { useGetStepQuery } from 'generated/graphql';\nimport Loader from 'components/loader/Loader';\n\nconst StepContainer = ():any  => {\n    const [{ timeline, currentStep }, dispatch] = useStateValue();\n    const latestTimelineEntry = getLatestEntryFromTimeline(timeline) || getFakeTimelineEntry();\n\n    const { data, loading } = useGetStepQuery({\n        variables: {\n            step_id: String(latestTimelineEntry.step.step_id),\n            conditions: latestTimelineEntry.conditions,\n        },\n        errorPolicy: 'all'\n    });\n\n    useEffect(() => {\n        if (!data) {\n            return;\n        }\n        const loadedStep = data.GetNextStep;\n        if (loadedStep !== currentStep) {\n            dispatch({ type: ActionType.setCurrentStep, step: loadedStep });\n        }\n\n    }, [timeline, data, currentStep, dispatch]);\n\n    if (!latestTimelineEntry) {\n        return null;\n    }\n\n    const loadedStep = data && data.GetNextStep;\n\n    return (\n        <React.Fragment>\n            {(!data || loading) && (<Loader/>)}\n            {!loading && loadedStep && (\n                <Step\n                    key={Number(loadedStep.step_id)}\n                    id={Number(loadedStep.step_id)}\n                >\n                    {loadedStep.buildingblocks}\n                </Step>\n            )}\n        </React.Fragment>\n    );\n};\nexport default StepContainer;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport VerisureHome from 'images/products/verisure-home.png';\n\n// Style\nimport Styles from './Result.module.scss';\n\nconst ResultHome = (): React.ReactElement<any> => {\n\n    const heroClass = classNames( Styles.row, Styles.hero);\n    const uspClass = classNames( Styles.row, Styles.usp);\n    const greyClass = classNames( Styles.row, Styles.rowGrey);\n    const greyDarkClass = classNames( Styles.row, Styles.rowGreyDark);\n    const tpClass = classNames( Styles.row, Styles.rowGrey, Styles.tp);\n\n    return (\n        <div className={Styles.result}>\n            <div className={heroClass}>\n                <div>\n                    <h4>Anbefalingen til dig:</h4>\n                    <h1>Verisure Home</h1>\n                </div>\n                <img src={VerisureHome} alt=\"Verisure Home\"/>\n            </div>\n            <div className={uspClass}>\n                <h4>Sikrer dit hjem mod</h4>\n                <div className={Styles.col3}>\n                    <div className={Styles.uspBreakin}>Indbrud</div>\n                    <div className={Styles.uspFire}>Brand</div>\n                    <div className={Styles.uspAssault}>Overfald</div>\n                </div>\n            </div>\n            <div className={greyClass}>\n                <h2>Alarmpakken til dig</h2>\n                <p>Med Verisure Home får du en effektiv døgnovervåget tyveri- og brandalarm.</p>\n                <p>Kameraovervågning, overfaldsalarm og tovejskommunikation med direkte forbindelse til Verisures vagtcentral sikrer dig lynhurtig og professionel assistance, hvis uheldet er ude.</p>\n                <h3>Alarmpakken indeholder:</h3>\n                <table>\n                    <tbody>\n                        <tr><td>Vibrationssensor</td><td>2 stk.</td></tr>\n                        <tr><td>Fotodetektor</td><td>1 stk.</td></tr>\n                        <tr><td>Verisure Portal</td><td>1 stk.</td></tr>\n                        <tr><td>Røgalarm</td><td>2 stk.</td></tr>\n                        <tr><td>Alarmskilt</td><td>10 stk.</td></tr>\n                        <tr><td>Verisure app</td><td></td></tr>\n                    </tbody>\n                </table>\n                <h3>Pris:</h3>\n                <table>\n                    <tbody>\n                        <tr><td>Abonnement:</td><td>349 kr./md.</td></tr>\n                        <tr><td>Installation:</td><td>100 kr.md. de første 60 md.</td></tr>\n                        <tr><td>Oprettelse:</td><td>3.995 kr.</td></tr>\n                        <tr><td>PBS-gebyr:</td><td>9,75 kr./md.</td></tr>\n                    </tbody>\n                </table>\n                <p>Pris første måned er 4.453,75 kr., hvorefter den falder til 358,75 kr./md.</p>\n                <p>Der er 14 dages fortrydelsesret efter aftalens indgåelse.</p>\n                <p>Kreditgodkendelse forudsættes.</p>\n            </div>\n            <div className={Styles.row}>\n                <h3>Verisure Home</h3>\n                <ul>\n                    <li>Fotosensor</li>\n                    <li>Brandalarm med billedverifikation</li>\n                    <li>Åbningskontakter med vibrationsdetektor</li>\n                    <li>Overfaldsalarm via portal</li>\n                    <li>Direkte tovejskommunikation via portal</li>\n                    <li>Hel eller delvis tilkobling af systemet uanset om du er ude eller hjemme</li>\n                    <li>Professionel installation</li>\n                    <li>GSM- og bredbåndsforbindelse til kontrolcentral</li>\n                    <li>Døgnovervågning og vagtudrykning</li>\n                    <li>Gratis app</li>\n                    <li>Ingen bindingsperiode</li>\n                </ul>\n            </div>\n            <div className={greyDarkClass}>\n                <h1>Som Verisure-kunde får du:</h1>\n                <ul className={Styles.specilList}>\n                    <li><strong>73 %</strong> lavere risiko for indbrud</li>\n                    <li>Døgnovervågning fra <strong>politigodkendt</strong> kontrolcentral</li>\n                    <li><strong>Gratis</strong> vagtudrykning døgnet rundt</li>\n                    <li>Op til <strong>7.200 kr.</strong> i håndværkerfradrag</li>\n                </ul>\n            </div>\n            <div className={tpClass}>\n                <h1>Det siger kunderne om verisure</h1>\n            </div>\n        </div>\n    )\n};\n\nexport default ResultHome;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport VerisurePortal from 'images/products/verisure-portal.png';\n\n// Style\nimport Styles from './Result.module.scss';\n\nconst ResultComponents = (): React.ReactElement<any> => {\n\n    const heroClass = classNames( Styles.row, Styles.hero);\n    const greyClass = classNames( Styles.row, Styles.rowGrey);\n    const greyDarkClass = classNames( Styles.row, Styles.rowGreyDark);\n    const tpClass = classNames( Styles.row, Styles.rowGrey, Styles.tp);\n\n    return (\n        <div className={Styles.result}>\n            <div className={heroClass}>\n                <div>\n                    <h4 className={Styles.red}>Dit resultat:</h4>\n                    <h1>Pris inkl. fri vagtudrykning<br />Fra 349kr./måned</h1>\n                    <p>Hertil kommer fradragsberettigede installationsomkostninger og oprettelsesgebyr.</p>\n                </div>\n            </div>\n            <div className={greyClass}>\n                <h2>Dit resultat af alarmtesten</h2>\n                <p>Kombinationen af dine svar i alarmtesten gør, at flere af vores alarmløsninger vil kunne passe til dig. Derfor viser vi ikke en specifik pakke her. I stedet kan du nedenfor se de komponenter, vi som udgangspunkt vil anbefale dig, at dit alarmsystem omfatter. Antallet af komponenter afhænger af dit hjems størrelse, plantegning og indretning.</p>\n                <p>Det er vigtigt for os, at alarmsystemet passer præcist til dit hjem og dine ønsker. Derved opnår du nemlig den højeste grad af sikkerhed, tryghed og tilfredshed. Vi ringer derfor snart til dig med uddybende spørgsmål om din bolig og dine behov, så vi sammen kan komme nærmere den bedste løsning til dig.</p>\n            </div>\n            <div className={greyClass}>\n                <h3>Anbefalede alarmkomponenter</h3>\n                <ul className={Styles.productList}>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Cantralenhed\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Verisure Portal\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Vibrationsdetektor\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Fotosensor\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Alarmskilt\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Røgalarm\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Smartplug\n                    </li>\n                </ul>\n            </div>\n            <div className={Styles.row}>\n                <h3>Derudover bør du overveje</h3>\n                <ul className={Styles.productList}>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Night Control overfaldsalarm\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Indendørs videoovervågning\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Udendørs videoovervågning\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        SmartCam overvågningskamera\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Røgkanon til tågesikring\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Vandalarm\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Klimasensor\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Yale Doorman dørlås\n                    </li>\n                    <li>\n                        <div className={Styles.productImage}><img src={VerisurePortal} alt=\"Verisure\"/></div>\n                        Sirene\n                    </li>\n                </ul>\n            </div>\n            <div className={greyDarkClass}>\n                <h1>Som Verisure-kunde får du:</h1>\n                <ul className={Styles.specilList}>\n                    <li><strong>73 %</strong> lavere risiko for indbrud</li>\n                    <li>Døgnovervågning fra <strong>politigodkendt</strong> kontrolcentral</li>\n                    <li><strong>Gratis</strong> vagtudrykning døgnet rundt</li>\n                    <li>Op til <strong>7.200 kr.</strong> i håndværkerfradrag</li>\n                </ul>\n            </div>\n            <div className={tpClass}>\n                <h1>Det siger kunderne om verisure</h1>\n            </div>\n        </div>\n    )\n};\n\nexport default ResultComponents;\n","import * as React from 'react';\nimport { ResultType } from 'ts/enums/ResultType';\nimport ResultHome from './ResultHome';\nimport ResultComponents from './ResultComponents';\n\n// TODO: set other type then any\nconst Result = ({ type }: any): React.ReactElement<any> | null => {\n\n    switch (type) {\n        case ResultType.home:\n            return (<ResultHome />);\n        case ResultType.components:\n            return (<ResultComponents />);\n        // TODO: Change this when result page is created:\n        case ResultType.business:\n            alert(' I am business result page');\n            return (<ResultHome />);\n        // TODO: Change this when result page is created:\n        case ResultType.competition:\n            alert(' I am competition result page');\n            return (<ResultHome />);\n        case ResultType.unknown:\n        default:\n            return (<ResultHome />);\n    }\n};\n\nexport default Result;\n","import * as React from \"react\";\nimport { useStateValue } from \"context/FlowContext\";\nimport Step from \"components/Step/Step\";\nimport StepContainer from \"components/Step\";\nimport Result from \"components/Result/Result\";\n\nconst Flow = ({ firstStep }: { firstStep: any }) => {\n    const [{ timeline, resultPageType }] = useStateValue();\n    return (\n        <React.Fragment>\n            {!resultPageType && timeline.length === 0 && firstStep && (\n                <Step id={Number(firstStep.step_id)}>\n                    {firstStep.buildingblocks}\n                </Step>\n            )}\n            {!resultPageType && timeline.length >= 1 && (\n                <StepContainer />\n            )}\n            {resultPageType && (\n                <Result type={resultPageType} />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default Flow;\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { Step } from \"generated/graphql\";\nimport { useStateValue } from \"context/FlowContext\";\nimport { ActionType } from \"ts/enums/ActionType\";\nimport Flow from \"./Flow\";\nimport { getGlobalConditions } from \"../../helpers/globalConditions\";\n\nconst FlowContainer = ({ firstStep }: { firstStep: Step}): React.ReactElement<any> | null => {\n    const [, dispatch] = useStateValue();\n\n    useEffect(() => {\n        if (firstStep) {\n            dispatch({ type: ActionType.setCurrentStep, step: firstStep});\n            dispatch({ type: ActionType.addGlobalConditions, conditions: getGlobalConditions() });\n        }\n    }, [firstStep, dispatch]);\n\n\n    return (\n        <React.Fragment>\n            <Flow firstStep={firstStep}/>\n        </React.Fragment>\n    );\n};\nexport default FlowContainer;\n","import React from 'react';\nimport 'styles/normalizer.scss';\nimport 'App.scss';\nimport { useGetFlowQuery } from 'generated/graphql';\nimport { StateProvider } from 'context/FlowContext';\nimport FlowContainer from 'components/Flow';\nimport Loader from 'components/loader/Loader';\nimport { useGlobalConditions } from \"helpers/hooks\";\n\nconst App = () => {\n    const globalConditions = useGlobalConditions();\n    const { data, loading } = useGetFlowQuery({\n        variables: {\n            conditions: globalConditions,\n        },\n    });\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    // TODO: Error handling.\n    if (!data) {\n        return null;\n    }\n\n    return (\n        <StateProvider>\n            <div className=\"App\">\n                <FlowContainer firstStep={data.GetFlow}/>\n            </div>\n        </StateProvider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nimport possibleTypes from './generated/possibleTypes.json';\nimport App from './App';\n\nconsole.log(process.env);\n\n\n// TODO: Enable this when cache invalidation is in place:\n// (async () => {\n//     await persistCache({\n//         cache,\n//         // TODO: Something is weird with apollo clients type handling. Fix it.\n//         // @ts-ignore\n//         storage: window.localStorage,\n//     });\n// })();\n\nconst client = new ApolloClient({\n    cache: new InMemoryCache(possibleTypes),\n    uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <ApolloHooksProvider client={client}>\n            <App />\n        </ApolloHooksProvider>\n    </ApolloProvider>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"result\":\"Result_result__bzLfj\",\"specilList\":\"Result_specilList__e1I-R\",\"productList\":\"Result_productList__1UGug\",\"productImage\":\"Result_productImage__XTNfN\",\"row\":\"Result_row__Vsz1i\",\"hero\":\"Result_hero__1jJfz\",\"usp\":\"Result_usp__1j0PU\",\"uspBreakin\":\"Result_uspBreakin__3VqbZ\",\"uspFire\":\"Result_uspFire__3uFsP\",\"uspAssault\":\"Result_uspAssault__1dQ_R\",\"tp\":\"Result_tp__3KwhY\",\"rowGrey\":\"Result_rowGrey__3o80v\",\"rowGreyDark\":\"Result_rowGreyDark__3PQ42\",\"col3\":\"Result_col3__1Li1B\",\"red\":\"Result_red__O9BiP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageBlock\":\"Image_imageBlock__3zDpk\",\"image\":\"Image_image__1k372\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primary\":\"Button_primary__2ZjcM\",\"secondary\":\"Button_secondary__1tm6o\",\"back\":\"Button_back__Jazp8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"RadioButton_input__PWZz6\",\"button\":\"RadioButton_button__28NH5\",\"label\":\"RadioButton_label__qcB7W\",\"list\":\"RadioButton_list__1t486\",\"slider\":\"RadioButton_slider__3qH5C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1NuUO\",\"zipcode\":\"Message_zipcode__30JFa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textfield\":\"TextField_textfield__1USm_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Progress\":\"Progress_Progress__2wMGn\",\"ProgressCurrent\":\"Progress_ProgressCurrent__1wduK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__3JGDv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paragraph\":\"Paragraph_paragraph__3_E2D\",\"quote\":\"Paragraph_quote__1xFu7\",\"checkboxed\":\"Paragraph_checkboxed__1nxbL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SubmitButton_button__QdroQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"question\":\"Question_question__jNMHl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"step\":\"Step_step__5edtl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__lzqSF\",\"rotating\":\"Loader_rotating__3wagq\"};","module.exports = __webpack_public_path__ + \"static/media/verisure-home.0ae190ad.png\";"],"sourceRoot":""}